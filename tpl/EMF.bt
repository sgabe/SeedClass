//------------------------------------------------
//--- 010 Editor v2.1.3 Binary Template
//
//      File: EMF.bt
//   Authors: Gabor Seljan
//    E-mail: gabor@seljan.hu
//   Version: 0.2
//   Purpose: Enhanced Metafile Format (EMF) template. 
//  Category: Image
// File Mask: *.emf
//  ID Bytes: 01 00 00 00
//   History:
//   0.2   2024-01-26 G Seljan: Updated version.
//   0.1   2023-11-20 G Seljan: Initial version.
//
// References:
//   MS-EMF: Enhanced Metafile Format 18.0, Microsoft
//------------------------------------------------

// Define structures used in EMF files

// https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/1eec80ba-799b-4784-a9ac-91597d590ae1
typedef enum <DWORD> {
  EMR_HEADER                  = 0x1,
  EMR_POLYBEZIER              = 0x2,
  EMR_POLYGON                 = 0x3,
  EMR_POLYLINE                = 0x4,
  EMR_POLYBEZIERTO            = 0x5,
  EMR_POLYLINETO              = 0x6,
  EMR_POLYPOLYLINE            = 0x7,
  EMR_POLYPOLYGON             = 0x8,
  EMR_SETWINDOWEXTEX          = 0x9,
  EMR_SETWINDOWORGEX          = 0xA,
  EMR_SETVIEWPORTEXTEX        = 0xB,
  EMR_SETVIEWPORTORGEX        = 0xC,
  EMR_SETBRUSHORGEX           = 0xD,
  EMR_EOF                     = 0xE,
  EMR_SETPIXELV               = 0xF,
  EMR_SETMAPPERFLAGS          = 0x10,
  EMR_SETMAPMODE              = 0x11,
  EMR_SETBKMODE               = 0x12,
  EMR_SETPOLYFILLMODE         = 0x13,
  EMR_SETROP2                 = 0x14,
  EMR_SETSTRETCHBLTMODE       = 0x15,
  EMR_SETTEXTALIGN            = 0x16,
  EMR_SETCOLORADJUSTMENT      = 0x17,
  EMR_SETTEXTCOLOR            = 0x18,
  EMR_SETBKCOLOR              = 0x19,
  EMR_OFFSETCLIPRGN           = 0x1A,
  EMR_MOVETOEX                = 0x1B,
  EMR_SETMETARGN              = 0x1C,
  EMR_EXCLUDECLIPRECT         = 0x1D,
  EMR_INTERSECTCLIPRECT       = 0x1E,
  EMR_SCALEVIEWPORTEXTEX      = 0x1F,
  EMR_SCALEWINDOWEXTEX        = 0x20,
  EMR_SAVEDC                  = 0x21,
  EMR_RESTOREDC               = 0x22,
  EMR_SETWORLDTRANSFORM       = 0x23,
  EMR_MODIFYWORLDTRANSFORM    = 0x24,
  EMR_SELECTOBJECT            = 0x25,
  EMR_CREATEPEN               = 0x26,
  EMR_CREATEBRUSHINDIRECT     = 0x27,
  EMR_DELETEOBJECT            = 0x28,
  EMR_ANGLEARC                = 0x29,
  EMR_ELLIPSE                 = 0x2A,
  EMR_RECTANGLE               = 0x2B,
  EMR_ROUNDRECT               = 0x2C,
  EMR_ARC                     = 0x2D,
  EMR_CHORD                   = 0x2E,
  EMR_PIE                     = 0x2F,
  EMR_SELECTPALETTE           = 0x30,
  EMR_CREATEPALETTE           = 0x31,
  EMR_SETPALETTEENTRIES       = 0x32,
  EMR_RESIZEPALETTE           = 0x33,
  EMR_REALIZEPALETTE          = 0x34,
  EMR_EXTFLOODFILL            = 0x35,
  EMR_LINETO                  = 0x36,
  EMR_ARCTO                   = 0x37,
  EMR_POLYDRAW                = 0x38,
  EMR_SETARCDIRECTION         = 0x39,
  EMR_SETMITERLIMIT           = 0x3A,
  EMR_BEGINPATH               = 0x3B,
  EMR_ENDPATH                 = 0x3C,
  EMR_CLOSEFIGURE             = 0x3D,
  EMR_FILLPATH                = 0x3E,
  EMR_STROKEANDFILLPATH       = 0x3F,
  EMR_STROKEPATH              = 0x40,
  EMR_FLATTENPATH             = 0x41,
  EMR_WIDENPATH               = 0x42,
  EMR_SELECTCLIPPATH          = 0x43,
  EMR_ABORTPATH               = 0x44,
  EMR_RESERVED_69             = 0x45,
  EMR_COMMENT                 = 0x46,
  EMR_FILLRGN                 = 0x47,
  EMR_FRAMERGN                = 0x48,
  EMR_INVERTRGN               = 0x49,
  EMR_PAINTRGN                = 0x4A,
  EMR_EXTSELECTCLIPRGN        = 0x4B,
  EMR_BITBLT                  = 0x4C,
  EMR_STRETCHBLT              = 0x4D,
  EMR_MASKBLT                 = 0x4E,
  EMR_PLGBLT                  = 0x4F,
  EMR_SETDIBITSTODEVICE       = 0x50,
  EMR_STRETCHDIBITS           = 0x51,
  EMR_EXTCREATEFONTINDIRECTW  = 0x52,
  EMR_EXTTEXTOUTA             = 0x53,
  EMR_EXTTEXTOUTW             = 0x54,
  EMR_POLYBEZIER16            = 0x55,
  EMR_POLYGON16               = 0x56,
  EMR_POLYLINE16              = 0x57,
  EMR_POLYBEZIERTO16          = 0x58,
  EMR_POLYLINETO16            = 0x59,
  EMR_POLYPOLYLINE16          = 0x5A,
  EMR_POLYPOLYGON16           = 0x5B,
  EMR_POLYDRAW16              = 0x5C,
  EMR_CREATEMONOBRUSH         = 0x5D,
  EMR_CREATEDIBPATTERNBRUSHPT = 0x5E,
  EMR_EXTCREATEPEN            = 0x5F,
  EMR_POLYTEXTOUTA            = 0x60,
  EMR_POLYTEXTOUTW            = 0x61,
  EMR_SETICMMODE              = 0x62,
  EMR_CREATECOLORSPACE        = 0x63,
  EMR_SETCOLORSPACE           = 0x64,
  EMR_DELETECOLORSPACE        = 0x65,
  EMR_GLSRECORD               = 0x66,
  EMR_GLSBOUNDEDRECORD        = 0x67,
  EMR_PIXELFORMAT             = 0x68,
  EMR_DRAWESCAPE              = 0x69,
  EMR_EXTESCAPE               = 0x6A,
  EMR_RESERVED_107            = 0x6B,
  EMR_SMALLTEXTOUT            = 0x6C,
  EMR_FORCEUFIMAPPING         = 0x6D,
  EMR_NAMEDESCAPE             = 0x6E,
  EMR_COLORCORRECTPALETTE     = 0x6F,
  EMR_SETICMPROFILEA          = 0x70,
  EMR_SETICMPROFILEW          = 0x71,
  EMR_ALPHABLEND              = 0x72,
  EMR_SETLAYOUT               = 0x73,
  EMR_TRANSPARENTBLT          = 0x74,
  EMR_RESERVED_117            = 0x75,
  EMR_GRADIENTFILL            = 0x76,
  EMR_SETLINKEDUFIS           = 0x77,
  EMR_SETTEXTJUSTIFICATION    = 0x78,
  EMR_COLORMATCHTOTARGETW     = 0x79,
  EMR_CREATECOLORSPACEW       = 0x7A
} EmfRecordType;

typedef enum <DWORD> {
  NEWFRAME                      = 0x00000001,
  ABORTDOC                      = 0x00000002,
  NEXTBAND                      = 0x00000003,
  SETCOLORTABLE                 = 0x00000004,
  GETCOLORTABLE                 = 0x00000005,
  FLUSHOUT                      = 0x00000006,
  DRAFTMODE                     = 0x00000007,
  QUERYESCSUPPORT               = 0x00000008,
  SETABORTPROC                  = 0x00000009,
  STARTDOC                      = 0x0000000A,
  ENDDOC                        = 0x0000000B,
  GETPHYSPAGESIZE               = 0x0000000C,
  GETPRINTINGOFFSET             = 0x0000000D,
  GETSCALINGFACTOR              = 0x0000000E,
  META_ESCAPE_ENHANCED_METAFILE = 0x0000000F,
  SETPENWIDTH                   = 0x00000010,
  SETCOPYCOUNT                  = 0x00000011,
  SETPAPERSOURCE                = 0x00000012,
  PASSTHROUGH                   = 0x00000013,
  GETTECHNOLOGY                 = 0x00000014,
  SETLINECAP                    = 0x00000015,
  SETLINEJOIN                   = 0x00000016,
  SETMITERLIMIT                 = 0x00000017,
  BANDINFO                      = 0x00000018,
  DRAWPATTERNRECT               = 0x00000019,
  GETVECTORPENSIZE              = 0x0000001A,
  GETVECTORBRUSHSIZE            = 0x0000001B,
  ENABLEDUPLEX                  = 0x0000001C,
  GETSETPAPERBINS               = 0x0000001D,
  GETSETPRINTORIENT             = 0x0000001E,
  ENUMPAPERBINS                 = 0x0000001F,
  SETDIBSCALING                 = 0x00000020,
  EPSPRINTING                   = 0x00000021,
  ENUMPAPERMETRICS              = 0x00000022,
  GETSETPAPERMETRICS            = 0x00000023,
  POSTSCRIPT_DATA               = 0x00000025,
  POSTSCRIPT_IGNORE             = 0x00000026,
  GETDEVICEUNITS                = 0x0000002A,
  GETEXTENDEDTEXTMETRICS        = 0x00000100,
  GETPAIRKERNTABLE              = 0x00000102,
  EXTTEXTOUT                    = 0x00000200,
  GETFACENAME                   = 0x00000201,
  DOWNLOADFACE                  = 0x00000202,
  METAFILE_DRIVER               = 0x00000801,
  QUERYDIBSUPPORT               = 0x00000C01,
  BEGIN_PATH                    = 0x00001000,
  CLIP_TO_PATH                  = 0x00001001,
  END_PATH                      = 0x00001002,
  OPENCHANNEL                   = 0x0000100E,
  DOWNLOADHEADER                = 0x0000100F,
  CLOSECHANNEL                  = 0x00001010,
  POSTSCRIPT_PASSTHROUGH        = 0x00001013,
  ENCAPSULATED_POSTSCRIPT       = 0x00001014,
  POSTSCRIPT_IDENTIFY           = 0x00001015,
  POSTSCRIPT_INJECTION          = 0x00001016,
  CHECKJPEGFORMAT               = 0x00001017,
  CHECKPNGFORMAT                = 0x00001018,
  GET_PS_FEATURESETTING         = 0x00001019,
  MXDC_ESCAPE                   = 0x0000101A,
  SPCLPASSTHROUGH2              = 0x000011D8
} MetafileEscapes;

typedef enum <DWORD> {
   GRADIENT_FILL_RECT_H   = 0x00000000,
   GRADIENT_FILL_RECT_V   = 0x00000001,
   GRADIENT_FILL_TRIANGLE = 0x00000002
 } GradientFill;

/** 1.11 GamutMappingIntent
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/9fec0834-607d-427d-abd5-ab240fb0db38
 */
typedef enum <DWORD> {
  LCS_GM_ABS_COLORIMETRIC = 8,
  LCS_GM_BUSINESS         = 1,
  LCS_GM_GRAPHICS         = 2,
  LCS_GM_IMAGES           = 4
} GamutMappingIntent;

/** 1.14 LogicalColorSpace
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/eb4bbd50-b3ce-4917-895c-be31f214797f
 */
typedef enum <DWORD> {
  LCS_CALIBRATED_RGB      = 0x00000000,
  LCS_sRGB                = 0x73524742,
  LCS_WINDOWS_COLOR_SPACE = 0x57696E20
} LogicalColorSpace;

/** 1.29 RegionMode Enumeration
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b7f99f50-dd2f-4528-9624-f74140368019
 */
typedef enum <DWORD> {
  RGN_AND  = 1,
  RGN_OR   = 2,
  RGN_XOR  = 3,
  RGN_DIFF = 4,
  RGN_COPY = 5
 } RegionMode;

/** 1.31 StockObject
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d6dffd25-8615-42f8-aed1-309f1fe54ab2
 */
typedef enum <DWORD> {
  WHITE_BRUSH         = 0x80000000,
  LTGRAY_BRUSH        = 0x80000001,
  GRAY_BRUSH          = 0x80000002,
  DKGRAY_BRUSH        = 0x80000003,
  BLACK_BRUSH         = 0x80000004,
  NULL_BRUSH          = 0x80000005,
  WHITE_PEN           = 0x80000006,
  BLACK_PEN           = 0x80000007,
  NULL_PEN            = 0x80000008,
  OEM_FIXED_FONT      = 0x8000000A,
  ANSI_FIXED_FONT     = 0x8000000B,
  ANSI_VAR_FONT       = 0x8000000C,
  SYSTEM_FONT         = 0x8000000D,
  DEVICE_DEFAULT_FONT = 0x8000000E,
  DEFAULT_PALETTE     = 0x8000000F,
  SYSTEM_FIXED_FONT   = 0x80000010,
  DEFAULT_GUI_FONT    = 0x80000011,
  DC_BRUSH            = 0x80000012,
  DC_PEN              = 0x80000013
} StockObject;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/4e588f70-bd92-4a6f-b77f-35d0feaf7a57
typedef enum <DWORD> {
  BI_RGB       = 0x00000000,
  BI_RLE8      = 0x00000001,
  BI_RLE4      = 0x00000002,
  BI_BITFIELDS = 0x00000003,
  BI_JPEG      = 0x00000004,
  BI_PNG       = 0x00000005,
  BI_CMYK      = 0x0000000B,
  BI_CMYKRLE8  = 0x0000000C,
  BI_CMYKRLE4  = 0x0000000D
} Compression;


// https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b63c02c1-7644-4ef3-a496-3127621cb7b5
typedef enum <DWORD> {
  COLORMATCHTOTARGET_NOTEMBEDDED = 0x00000000,
  COLORMATCHTOTARGET_EMBEDDED    = 0x00000001
} ColorMatchToTarget;

// https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/75da12f8-f437-48e8-8677-4b46e0045969
typedef enum <DWORD> {
  CS_ENABLE           = 0x00000001,
  CS_DISABLE          = 0x00000002,
  CS_DELETE_TRANSFORM = 0x00000003
} ColorSpace;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/792153f4-1e99-4ec8-93cf-d171a5f33903
typedef enum <WORD> {
  BI_BITCOUNT_0 = 0,
  BI_BITCOUNT_1 = 1, // Bitmap is monochrome.
  BI_BITCOUNT_2 = 4, // Bitmap has a maximum of 16 colors.
  BI_BITCOUNT_3 = 8, // Bitmap has a maximum of 256 colors.
  BI_BITCOUNT_4 = 0x10, // Bitmap has a maximum of 2^16 colors.
  BI_BITCOUNT_5 = 0x18, // Bitmap has a maximum of 2^24 colors.
  BI_BITCOUNT_6 = 0x20  // Bitmap has a maximum of 2^32 colors.
 } BitCount;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/38e6de43-2cfe-428e-874e-391dbf74570c
typedef enum {
  BS_SOLID   = 0,
  BS_NULL    = 1,
  BS_HATCHED = 2,
 } BrushStyle;

 // https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a5e722e3-891a-4a67-be1a-ed5a48a7fda1
typedef enum {
  DIB_RGB_COLORS  = 0,
  DIB_PAL_COLORS  = 1,
  DIB_PAL_INDICES = 2
} DIBColors;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-xform
typedef struct tagXFORM {
  FLOAT eM11;
  FLOAT eM12;
  FLOAT eM21;
  FLOAT eM22;
  FLOAT eDx;
  FLOAT eDy;
} XFORM;

typedef struct {
  LONG  cx;
  LONG  cy;
} SIZEL;

typedef struct _RECTL { 
  LONG left; 
  LONG top; 
  LONG right; 
  LONG bottom; 
} RECTL;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-ciexyz
typedef struct tagCIEXYZ {
  LONG ciexyzX;
  LONG ciexyzY;
  LONG ciexyzZ;
} CIEXYZ;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-ciexyztriple
typedef struct tagICEXYZTRIPLE {
  CIEXYZ ciexyzRed;
  CIEXYZ ciexyzGreen;
  CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/0fdf54fc-6357-4cdd-b27f-795dee14cf86
typedef struct {
  UBYTE	Red;
  UBYTE Green;
  UBYTE Blue;
  UBYTE Reserved;
} COLORREF;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/6d790f8d-5165-4746-bac3-3443915c2071
typedef struct {
  BrushStyle lbStyle;
  COLORREF lbColor;
  DWORD lbHatch;
} LogBrushEx;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-blendfunction
typedef struct {
  BYTE BlendOp;
  BYTE BlendFlags;
  BYTE SourceConstantAlpha;
  BYTE AlphaFormat;
} BLENDFUNCTION;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/33578509-8349-46b6-8f8f-107c3f70bace
typedef struct _TRIVERTEX {
  LONG x;
  LONG y;
  WORD Red;
  WORD Green;
  WORD Blue;
  WORD Alpha;
} TRIVERTEX;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/93ba94f7-84fc-4dd5-8c94-3d476aa7588b
typedef struct _GRADIENT_RECT {
  ULONG UpperLeft;
  ULONG LowerRight;
} GRADIENT_RECT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/00cc8ab4-ea2e-4bb1-9569-1201af47a0c8
typedef struct {
  DWORD cbPixelFormat;
  DWORD offPixelFormat;
  DWORD bOpenGL;
} HeaderExtension1;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/9e96e5cf-e949-49ae-baa8-3fffd948e588
typedef struct {
  DWORD MicrometersX;
  DWORD MicrometersY;
} HeaderExtension2;

typedef struct {
  EmfRecordType iType;     // Record type EMR_HEADER.
  DWORD   nSize;           // Record size in bytes. This may be greater
                           // than the sizeof(ENHMETAHEADER).
  RECTL   rclBounds;       // Inclusive-inclusive bounds in device units.
  RECTL   rclFrame;        // Inclusive-inclusive Picture Frame of 
                           // metafile in .01 mm units. 
  DWORD   dSignature;      // Signature.  Must be ENHMETA_SIGNATURE.
  DWORD   nVersion;        // Version number.
  DWORD   nBytes;          // Size of the metafile in bytes.
  DWORD   nRecords;        // Number of records in the metafile.
  WORD    nHandles;        // Number of handles in the handle table.
                           // Handle index zero is reserved.
  WORD    sReserved;       // Reserved.  Must be zero.
  DWORD   nDescription;    // Number of chars in the unicode description string.
                           // This is 0 if there is no description string.
  DWORD   offDescription;  // Offset to the metafile description record.
                           // This is 0 if there is no description string.
  DWORD   nPalEntries;     // Number of entries in the metafile palette.
  SIZEL   szlDevice;       // Size of the reference device in pixels. 
  SIZEL   szlMillimeters;  // Size of the reference device in millimeters.
  HeaderExtension1 EmfHeaderExtension1;
  HeaderExtension2 EmfHeaderExtension2;
} EMRHEADER;

typedef struct {
  WORD desc[EmfHeader.nDescription];
} EMRDESCRIPTION;

/** 2.11 LogColorSpace
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/0a8def2e-0d65-4174-9f67-17c8f3341514
 */
typedef struct tagLOGCOLORSPACEA {
  DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LogicalColorSpace lcsCSType;
  GamutMappingIntent lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  CHAR lcsFilename[260];
} LOGCOLORSPACEA;

/** 2.12 LogColorSpaceW
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wmf/87794877-4d83-40fa-98cb-9ffa20eed863
 */
typedef struct tagLOGCOLORSPACEW {
  DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LogicalColorSpace lcsCSType;
  GamutMappingIntent lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  CHAR lcsFilename[520];
} LOGCOLORSPACEW;

// Harli : 3/8/2017 1:16:26
// https://msdn.microsoft.com/en-us/library/windows/desktop/dd162938(v=vs.85).aspx
typedef struct tagRGBQUAD {
  BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
} RGBQUAD;

// https://docs.microsoft.com/en-us/windows/win32/api/windef/ns-windef-point
typedef struct tagPOINT {
  LONG x;
  LONG y;
} POINT;

// https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/dd585d0a-5d7c-4034-963a-1141af836972
typedef struct tagEMRTEXT {
  POINT ptlReference;
  DWORD nChars;
  DWORD offString;
  DWORD fOptions;
  RECTL rcl;
  DWORD offDx;
  BYTE bStringBuffer[nChars];
} EMRTEXT;

// https://docs.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-logpen
typedef struct tagLOGPEN {
  UINT lopnStyle;
  POINT lopnWidth;
  COLORREF lopnColor;
} LOGPEN;

/** 2.20 LogPenEx
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/5b67b3ee-ea00-4f80-9b73-2959804381be
 */
typedef struct tagLOGPENEX {
  DWORD PenStyle;
  DWORD Width;
  BrushStyle lbStyle;
  COLORREF lbColor;
  DWORD lbHatch;
  DWORD NumStyleEntries;
  DWORD StyleEntry[NumStyleEntries];
} LOGPENEX;

/** 2.18 LogPaletteEntry Object
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c1f7b285-be16-4112-a4e6-0b2fd4c1d148
 */
typedef struct tagLOGPALETTEENTRY {
  uchar	Reserved;
  uchar	Blue;
  uchar	Green;
  uchar	Red;
} LOGPALETTEENTRY;

/** 2.17 LogPalette Object
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/758f047d-765e-424c-9204-a833b7b4e527
 */
typedef struct tagLOGPALETTE {
  WORD palVersion;
  WORD palNumEntries;
  LOGPALETTEENTRY palPalEntry[palNumEntries];
} LOGPALETTE;

/** 2.25 RegionDataHeader Object
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/5ca68a15-1811-45b6-a51b-5e40d1055ccc
 */
typedef struct tagREGIONDATAHEADER {
  DWORD nSize;
  DWORD iType;
  DWORD cntRects;
  DWORD rgnSize;
  RECTL rgnBounds;
} REGIONDATAHEADER;

/** 2.24 RegionData Object
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e66601f2-9b5c-4619-8476-ddb7b087551b
 */
typedef struct tagREGIONDATA {
  REGIONDATAHEADER rgnDataHeader;
  RECTL data[rgnDataHeader.cntRects];
} REGIONDATA;

/** 2.2.27 UniversalFontId Object
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/34502dab-22b4-4855-b9b2-88f00a4a0c52
 */
typedef struct {
  DWORD checksum;
  DWORD index;
} UniversalFontId;

// Harli : 3/8/2017 1:16:26
// https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375(v=vs.85).aspx
typedef struct tagBITMAPINFOHEADER {
  DWORD biSize;
  LONG  biWidth;
  LONG  biHeight;
  WORD  biPlanes;
  WORD  biBitCount;
  DWORD biCompression;
  DWORD biSizeImage;
  LONG  biXPelsPerMeter;
  LONG  biYPelsPerMeter;
  DWORD biClrUsed;
  DWORD biClrImportant;
} BITMAPINFOHEADER;

// https://msdn.microsoft.com/en-us/library/windows/desktop/dd183376(v=vs.85).aspx
typedef struct tagBITMAPINFO {
  BITMAPINFOHEADER bmiHeader;

  if (bmiHeader.biBitCount             == BI_BITCOUNT_1) { // 0x1
    RGBQUAD bmiColors[2];
  } else if (bmiHeader.biBitCount      == BI_BITCOUNT_2) { // 0x4
    RGBQUAD bmiColors[16];
  } else if (bmiHeader.biBitCount      == BI_BITCOUNT_3) { // 0x8
    RGBQUAD bmiColors[256];
  } else if (bmiHeader.biBitCount      == BI_BITCOUNT_4) { // 0x10
    RGBQUAD bmiColors[1];
  } else if (bmiHeader.biBitCount      == BI_BITCOUNT_5) { // 0x18
    RGBQUAD bmiColors[1];
  } else if (bmiHeader.biBitCount      == BI_BITCOUNT_6) { // 0x20
    if (bmiHeader.biCompression        == BI_RGB) {
      RGBQUAD bmiColors[1];
    } else if (bmiHeader.biCompression == BI_BITFIELDS) {
      RGBQUAD bmiColors[3];
    }
  }

} BITMAPINFO;

typedef struct {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD nPalEntries;
  DWORD offPalEntries;
  LOGPALETTEENTRY paletteBuffer[nPalEntries];
  DWORD SizeLast;
} EMREOF;

/** 1.1 EMR_ALPHABLEND
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/34e07d4f-aee6-4b63-a4bb-96996ad47669
 */
typedef struct tagEMRALPHABLEND {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  BLENDFUNCTION dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DIBColors iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG cxSrc;
  LONG cySrc;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
} EMRALPHABLEND;

/** 1.2 EMR_BITBLT Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/347d1c44-1847-47ec-8762-7059e9e9b185
 */
typedef struct tagEMRBITBLT {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD xDest;
  DWORD yDest;
  DWORD cxDest;
  DWORD cyDest;
  DWORD BitBltRasterOperation;
  DWORD xSrc;
  DWORD ySrc;
  XFORM xformSrc;
  DWORD BkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
} EMRBITBLT;

/** 1.3 EMR_MASKBLT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e6f715c0-d034-4eb3-952e-f8ee66adb9ed
 */
typedef struct tagEMRMASKBLT {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DIBColors iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG xMask;
  LONG yMask;
  DWORD iUsageMask;
  DWORD offBmiMask;
  DWORD cbBmiMask;
  DWORD offBitsMask;
  DWORD cbBitsMask;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
  if (cbBmiMask) {
    FSeek(emrOffset+offBmiMask);
    BITMAPINFO BmiMask;
  }
  if (cbBitsMask) {
    FSeek(emrOffset+offBitsMask);
    BYTE BitsMask[cbBitsMask];
  }
} EMRMASKBLT;

/** 1.4 EMR_PLGBLT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b6c8b39d-42c7-4221-ab70-93f1e09b644e
 */
typedef struct tagEMRPLGBLT {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclBounds;
  POINT aptlDest[3];
  LONG xSrc;
  LONG ySrc;
  LONG cxSrc;
  LONG cySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DIBColors iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG xMask;
  LONG yMask;
  DWORD iUsageMask;
  DWORD offBmiMask;
  DWORD cbBmiMask;
  DWORD offBitsMask;
  DWORD cbBitsMask;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
  if (cbBmiMask) {
    FSeek(emrOffset+offBmiMask);
    BITMAPINFO BmiMask;
  }
  if (cbBitsMask) {
    FSeek(emrOffset+offBitsMask);
    BYTE BitsMask[cbBitsMask];
  }
} EMRPLGBLT;

/** 1.5 EMR_SETDIBITSTODEVICE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e8816cc6-35d2-43e6-8d88-d69cd342372e
 */
typedef struct {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclBounds;
  DWORD xDest;
  DWORD yDest;
  DWORD xSrc;
  DWORD ySrc;
  DWORD cxSrc;
  DWORD cySrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  DIBColors iUsageSrc;
  DWORD iStartScan;
  DWORD cScans;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
} EMRSETDIBITSTODEVICE;

/** 1.6 EMR_STRETCHBLT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/0dd551f3-80f7-4852-89c2-9ddba803a192
 */
typedef struct tagEMRSTRETCHBLT {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DIBColors iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG cxSrc;
  LONG cySrc;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
} EMRSTRETCHBLT;

/** 1.7 EMR_STRETCHDIBITS
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/89c0d808-0dea-413f-be40-2e9e51fa36ac
 */
typedef struct tagEMRSTRETCHDIBITS {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD xDest;
  DWORD yDest;
  DWORD xSrc;
  DWORD ySrc;
  DWORD cxSrc;
  DWORD cySrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  DIBColors iUsageSrc;
  DWORD dwRop;
  DWORD cxDest;
  DWORD cyDest;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
} EMRSTRETCHDIBITS;

/** 1.8 EMR_TRANSPARENTBLT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/aa216051-2dc0-4317-b343-525431cfa103
 */
typedef struct tagEMRTRANSPARENTBLT {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DIBColors iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG cxSrc;
  LONG cySrc;
  if (cbBmiSrc) {
    FSeek(emrOffset+offBmiSrc);
    BITMAPINFO BmiSrc;
  }
  if (cbBitsSrc) {
    FSeek(emrOffset+offBitsSrc);
    BYTE BitsSrc[cbBitsSrc];
  }
} EMRTRANSPARENTBLT;

/** 2.1 EMR_EXCLUDECLIPRECT Record
 * https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-emrexcludecliprect
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a521411e-b877-4199-abb6-b4514b3574f8
 */
typedef struct tagEMREXCLUDECLIPRECT {
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclClip;
} EMREXCLUDECLIPRECT;

/** 2.2 EMR_EXTSELECTCLIPRGN
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c6b9f4e6-27f6-4a4d-a383-c2daf5da11d9
 */
typedef struct tagEMREXTSELECTCLIPRGN {
  EmfRecordType iType;
  DWORD nSize;
  DWORD rgnDataSize;
  RegionMode rgnMode;
  REGIONDATA rgnData <optimize=false>;
} EMREXTSELECTCLIPRGN;

/** 2.4 EMR_OFFSETCLIPRGN Record
 * https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-emroffsetcliprgn
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/8bf2b60d-3b19-4bd1-b2d7-c89b027ad808
 */
typedef struct tagEMROFFSETCLIPRGN {
  EmfRecordType iType;
  DWORD nSize;
  POINT offset;
} EMROFFSETCLIPRGN;

/** 2.5 EMR_SELECTCLIPPATH
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4a26bcf8-6607-4a09-8ec3-a8768eadc8e8
 */
typedef struct tagEMRSELECTCLIPPATH {
  EmfRecordType iType;
  DWORD nSize;
  RegionMode rgnMode;
} EMRSELECTCLIPPATH;

/** 5.1 EMR_ANGLEARC Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/3b04a2e2-9ba5-477f-b79c-5710635d04b9
 */
typedef struct tagEMRANGLEARC {
  EmfRecordType iType;
  DWORD	nSize;
  POINT ptlCenter;
  DWORD nRadius;
  FLOAT eStartAngle;
  FLOAT eSweepAngle;
} EMRANGLEARC;

/** 5.2 EMR_ARC Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/3e148f19-7e75-43aa-9259-fda562f60315
 */
typedef struct tagEMRARC {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBox;
  POINT ptlStart;
  POINT ptlEnd;
} EMRARC;

/** 5.3 EMR_ARCTO
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/51b4a890-bfd4-496e-bbd9-dbde9ad49d1c
 */
typedef struct tagEMRARCTO {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBox;
  POINT ptlStart;
  POINT ptlEnd;
} EMRARCTO;

/** 5.4 EMR_CHORD
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b442d2fb-f92b-4103-aa7d-44f864f719d5
 */
typedef struct tagEMRCHORD {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBox;
  POINT ptlStart;
  POINT ptlEnd;
} EMRCHORD;

/** 5.5 EMR_ELLIPSE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d9462a32-d188-40e7-bf72-05614ec4ff18
 */
typedef struct tagEMRELLIPSE {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBox;
} EMRELLIPSE;

/** 5.6 EMR_EXTFLOODFILL
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4f1b52ba-325a-4da8-bd5b-987c4a572e5f
 */
typedef struct tagEMREXTFLOODFILL {
  EmfRecordType iType;
  DWORD	nSize;
  POINT ptlStart;
  COLORREF crColor;
  DWORD iMode;
} EMREXTFLOODFILL;

/** 5.7 EMR_EXTTEXTOUTA
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/6b582a71-3c29-4fc6-a0f4-1f8a313739a1
 */
typedef struct tagEMREXTTEXTOUTA {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD iGraphicsMode;
  FLOAT exScale;
  FLOAT eyScale;
  EMRTEXT emrtext;
} EMREXTTEXTOUTA;

/** 5.9 EMR_FILLPATH
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/7cc0afcb-0693-4810-a3cb-b69c871ce473
 */
typedef struct tagEMRFILLPATH {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
} EMRFILLPATH;

/** 5.10 EMR_FILLRGN
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a1bb0f88-bb22-4956-b45a-7005546561cc
 */
typedef struct tagEMRFILLRGN {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD rgnDataSize;
  DWORD ihBrush;
  REGIONDATA rgnData <optimize=false>;
} EMRFILLRGN;

/** 5.11 EMR_FRAMERGN
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c370fc16-9045-467b-a125-7239428df6b3
 */
typedef struct tagEMRFRAMERGN {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD rgnDataSize;
  DWORD ihBrush;
  DWORD width;
  DWORD height;
  REGIONDATA rgnData <optimize=false>;
} EMRFRAMERGN;

/** 5.12 EMR_GRADIENTFILL
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/1a3849c8-be6c-4d30-b5d3-f43b4c70ca0d
 */
typedef struct tagEMRGRADIENTFILL {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD nVer;
  DWORD nTri;
  GradientFill ulMode;
  TRIVERTEX vObjects [nVer];
  GRADIENT_RECT vIndexes[nTri];
  DWORD vPadding[nTri];
} EMRGRADIENTFILL;

/** 5.13 EMR_LINETO
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/9b3eccf9-4a55-4a9c-b0df-3c495e7b9a8c
 */
typedef struct tagEMRLINETO {
  EmfRecordType iType;
  DWORD	nSize;
  POINT ptl;
} EMRLINETO;

/** 5.14 EMR_PAINTRGN
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/68c457dc-6df3-4609-b6f9-e28e5ca4d9c1
 */
typedef struct tagEMRPAINTRGN {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD rgnDataSize;
  REGIONDATA rgnData <optimize=false>;
} EMRPAINTRGN;

/** 5.15 EMR_PIE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c326f6b2-ae7e-447f-b8dc-02c703f054c3
 */
typedef struct tagEMRPIE {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL box;
  POINT start;
  POINT stop;
} EMRPIE;

/** 5.16 EMR_POLYBEZIER Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4e53793a-95af-49d4-ae1f-4c407eda9440
 */
typedef struct tagEMRPOLYBEZIER {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
} EMRPOLYBEZIER;

/** 5.18 EMR_POLYBEZIERTO Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/28431e45-a874-41dc-864d-8f4f69e8e831
 */
typedef struct tagEMRPOLYBEZIERTO {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
} EMRPOLYBEZIERTO;

/** 5.20 EMR_POLYDRAW Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/95794faf-eed8-4d5b-b6ff-c6765a58166e
 */
typedef struct tagEMRPOLYDRAW {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
  BYTE abTypes[cntPoints];
} EMRPOLYDRAW;

/** 5.22 EMR_POLYGON Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/eb916781-58b6-4e92-b606-68071aa65733
 */
typedef struct tagEMRPOLYGON {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
} EMRPOLYGON;

/** 5.24 EMR_POLYLINE Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/9ce6c9bb-1a13-48a5-9aa2-d95b334b5358
 */
typedef struct tagEMRPOLYLINE {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
} EMRPOLYLINE;

/** 5.26 EMR_POLYLINETO Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a2d8b738-8351-4a9c-9f3a-a6a8481c4c6f
 */
typedef struct tagEMRPOLYLINETO {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD cntPoints;
  POINT aPoints[cntPoints];
} EMRPOLYLINETO;

/** 5.28 EMR_POLYPOLYGON Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c60ff127-2711-42d3-85d4-502ca2e4caef
 */
typedef struct tagEMRPOLYPOLYGON {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD nPolys;
  DWORD cntPoints;
  DWORD aPolyCounts;
  POINT aPoints[cntPoints];
} EMRPOLYPOLYGON;

/** 5.30 EMR_POLYPOLYLINE Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e23f75fd-3af6-49f3-8c86-ef121ff61701
 */
typedef struct tagEMRPOLYPOLYLINE {
  EmfRecordType iType ;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD nPolys;
  DWORD cntPoints;
  DWORD aPolyCounts;
  POINT aPoints[cntPoints];
} EMRPOLYPOLYLINE;

/** 5.32 EMR_POLYTEXTOUTA
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d8b7ac21-76b8-4f9a-a7cc-05f9d2d5627e
 */
typedef struct tagEMRPOLYTEXTOUTA {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD iGraphicsMode;
  FLOAT exScale;
  FLOAT eyScale;
  LONG cStrings;
  EMRTEXT aemrtext[cStrings];
} EMRPOLYTEXTOUTA;

/** 5.34 EMR_RECTANGLE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/3c471238-0a02-4992-90a2-bfd2afd98f2a
 */
typedef struct tagEMRRECTANGLE {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBox;
} EMRRECTANGLE;

/** 5.35 EMR_ROUNDRECT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/2e4f55a1-5f69-4a81-8329-423eeedb3812
 */
typedef struct tagEMRROUNDRECT {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBox;
  SIZEL szlCorner;
} EMRROUNDRECT;

/** 5.36 EMR_SETPIXELV Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/21d44fb9-b3c7-4ce7-a402-7601f34d0cda
 */
typedef struct tagEMRSETPIXELV {
  EmfRecordType iType;
  DWORD	nSize;
  POINT ptlPixel;
  COLORREF crColor;
} EMRSETPIXELV;

/** 5.38 EMR_STROKEANDFILLPATH
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/2794792a-38b4-4d19-adec-28fc2a6273b2
 */
typedef struct tagEMRSTROKEANDFILLPATH {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
} EMRSTROKEANDFILLPATH;

/** 5.39 EMR_STROKEPATH
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/c8b86df6-7464-45b0-bca4-6ffab9174961
 */
typedef struct tagEMRSTROKEPATH {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
} EMRSTROKEPATH;

//------------------------------------------------
// 6. Escape Record Types
//------------------------------------------------

/** 6.1 EMR_DRAWESCAPE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/86405bb1-cc2c-42bc-9e0f-28874f208d98
 */
typedef struct tagEMRDRAWESCAPE {
  EmfRecordType iType;
  DWORD	nSize;
  MetafileEscapes iEscape;
  DWORD cjln;
  BYTE data[cjln];
} EMRDRAWESCAPE;

/** 6.2 EMR_EXTESCAPE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/a31ef1e7-54ba-41ae-b79d-e6fd102dc6b1
 */
typedef struct tagEMREXTESCAPE {
  EmfRecordType iType;
  DWORD	nSize;
  MetafileEscapes iEscape;
  DWORD cjln;
  BYTE data[cjln];
} EMREXTESCAPE;

/** 6.3 EMR_NAMEDESCAPE
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/125759e0-c839-4dc1-b5fb-e014e7e1159e
 */
typedef struct tagEMRNAMEDESCAPE {
  EmfRecordType iType;
  DWORD	nSize;
  MetafileEscapes iEscape;
  DWORD cjDriver;
  DWORD cjln;
  WORD driverName;
  BYTE data[cjln];
} EMRNAMEDESCAPE;

/** 7.1 EMR_CREATEBRUSHINDIRECT Record
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b9a8ef5d-0089-4e42-b317-e6ebc0ff098f
 */
typedef struct tagEMRCREATEBRUSHINDIRECT {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihBrush;
  LogBrushEx LogBrush;
} EMRCREATEBRUSHINDIRECT;

/** 7.2 EMR_CREATECOLORSPACE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/954af0ff-a8d7-4d34-80ed-89f570bac016
 */
typedef struct tagEMRCREATECOLORSPACE {
  EmfRecordType iType;
  DWORD	ihCS;
  DWORD ics;
  LOGCOLORSPACEA lcs;
} EMRCREATECOLORSPACE;

/** 7.3 EMR_CREATECOLORSPACEW
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d1cd2147-7fb6-4d97-8f7e-a289006b6064
 */
typedef struct tagEMRCREATECOLORSPACEW {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihCS;
  LOGCOLORSPACEW lcs;
  DWORD dwFlags;
  DWORD cbData;
  BYTE Data[cbData];
} EMRCREATECOLORSPACEW;

/** 7.4 EMR_CREATEDIBPATTERNBRUSHPT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/332116b4-c6f9-4b18-a7cc-22c531b52afc
 */
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihBrush;
  DWORD iUsage;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
  FSeek(emrOffset+offBmi);
  if (cbBits != 0) {
    BITMAPINFO BmiSrc;
    BYTE BitsSrc[cbBits];
  }
} EMRCREATEDIBPATTERNBRUSHPT;

/** 7.5 EMR_CREATEMONOBRUSH
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/49b42277-31b0-4eb9-a6af-86d9be9b568f
 */
typedef struct tagEMRCREATEMONOBRUSH {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihBrush;
  DWORD iUsage;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
  FSeek(emrOffset+offBmi);
  if (cbBits != 0) {
    BITMAPINFO BmiSrc;
    BYTE BitsSrc[cbBits];
  }
} EMRCREATEMONOBRUSH;

/** 7.6 EMR_CREATEPALETTE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/07e1492b-e4bb-4394-934f-4eaee67ab8ff
 */
typedef struct tagEMRCREATEPALETTE {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihPal;
  LOGPALETTE lgpl;
} EMRCREATEPALETTE;

/** 7.7 EMR_CREATEPEN
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/2374647f-df67-48e3-86aa-384715c28e71
 */
typedef struct tagEMRCREATEPEN {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihPen;
  LOGPEN lopn;
} EMRCREATEPEN;

/** 7.9 EMR_EXTCREATEPEN
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/d7f51e05-4024-497c-ad4a-8aeca9d34256
 */
typedef struct tagEMREXTCREATEPEN {
  local uint emrOffset = FTell();
  FSeek(emrOffset);
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihPen;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
  LOGPENEX elp;
  //FSeek(emrOffset+offBmi);
  if (cbBits != 0) {
    BITMAPINFO BmiSrc;
    BYTE BitsSrc[cbBits];
  }
} EMREXTCREATEPEN;


//------------------------------------------------
// 8. Object Manipulation Record Types
//------------------------------------------------

/** 8.1 EMR_COLORCORRECTPALETTE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/99de1bfb-3d77-455b-8679-7386903e1472
 */
typedef struct tagCOLORCORRECTPALETTE {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihPalette;
  DWORD nFirstEntry;
  DWORD nPalEntries;
  DWORD nReserved;
} EMRCOLORCORRECTPALETTE;

/** 8.2 EMR_DELETECOLORSPACE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/5d137387-d79a-4bc8-9a4d-38291320e148
 */
typedef struct tagEMRDELETECOLORSPACE {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihCS;
} EMRDELETECOLORSPACE;

/** 8.3 EMR_DELETEOBJECT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/6f0f12a3-111a-478b-8251-a9505168f9a9
 */
typedef struct tagEMRDELETEOBJECT {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihCS;
} EMRDELETEOBJECT;

/** 8.4 EMR_RESIZEPALETTE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/ec789332-96b5-4bb8-9d7c-8b5c8c0da8b9
 */
typedef struct tagEMRRESIZEPALETTE {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihPal;
  DWORD NumberOfEntries;
} EMRRESIZEPALETTE;

/** 8.5 EMR_SELECTOBJECT
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/145b063d-5f96-41fe-b7ae-1e615b2bc2bf
 */
typedef struct {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihObject;
} EMRSELECTOBJECT;

/** 8.6 EMR_SELECTPALETTE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e6a4ce2a-209d-43df-b763-5d8e54c21a10
 */
typedef struct tagEMRSELECTPALETTE {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihPal;
} EMRSELECTPALETTE;

/** 8.7 EMR_SETCOLORSPACE
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/2a84d7a5-f8c1-4dd2-ae79-a029a25ad601
 */
typedef struct tagEMRSETCOLORSPACE {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihCS;
} EMRSETCOLORSPACE;

/** 8.8 EMR_SETPALETTEENTRIES
 * https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/88348296-3c9a-488f-bbf7-19c897535372
 */
typedef struct tagEMRSETPALETTEENTRIES {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ihPal;
  DWORD iStart;
  DWORD cEntries;
  LOGPALETTEENTRY aPalEntries[cEntries];
} EMRSETPALETTEENTRIES;


//------------------------------------------------
// 9. OpenGL Record Types
//------------------------------------------------

/** 9.1 EMR_GLSBOUNDEDRECORD
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/cb5036da-c79d-4aae-b1c0-a48361447a0b
 */
typedef struct tagEMRGLSBOUNDEDRECORD {
  EmfRecordType iType;
  DWORD	nSize;
  RECTL rclBounds;
  DWORD cbData;
  BYTE Data[cbData];
} EMRGLSBOUNDEDRECORD;

/** 9.2 EMR_GLSRECORD
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/4f2e2512-0c5d-468b-bb81-484cb1d4aa89
 */
typedef struct tagEMRGLSRECORD {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD cbData;
  BYTE Data[cbData];
} EMRGLSRECORD;


//------------------------------------------------
// 10. Path Bracket Record Types
//------------------------------------------------

typedef struct tagEMRBEGINPATH {
  EmfRecordType iType;
  DWORD	nSize;
} EMRBEGINPATH;

typedef struct tagEMRENDPATH {
  EmfRecordType iType;
  DWORD	nSize;
} EMRENDPATH;

typedef struct tagEMRCLOSEFIGURE {
  EmfRecordType iType;
  DWORD	nSize;
} EMRCLOSEFIGURE;

typedef struct tagEMRFLATTENPATH {
  EmfRecordType iType;
  DWORD	nSize;
} EMRFLATTENPATH;

typedef struct tagEMRWIDENPATH {
  EmfRecordType iType;
  DWORD	nSize;
} EMRWIDENPATH;

typedef struct tagEMRABORTPATH {
  EmfRecordType iType;
  DWORD nSize;
} EMRABORTPATH;

//------------------------------------------------
// 11. State Record Types
//------------------------------------------------

/** 2.3.11.1 EMR_COLORMATCHTOTARGETW Record
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/b9e3e8fa-1d07-4475-b0f2-d157eeca5417
 */
typedef struct {
  EmfRecordType iType;
  DWORD nSize;
  ColorSpace dwAction;
  ColorMatchToTarget dwFlags;
  DWORD cbName;
  DWORD cbData;
  BYTE data[cbName + cbData];
} EMRCOLORMATCHTOTARGETW;

/** 2.3.11.2 EMR_FORCEUFIMAPPING Record
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/e9a05924-e704-4037-8312-6bef2e19f6bd
 */
typedef struct {
  EmfRecordType iType;
  DWORD nSize;
  UniversalFontId ufi;
} EMRFORCEUFIMAPPING;

/** 2.3.11.3 EMR_INVERTRGN Record
 * https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-emf/5cbc44de-ad40-47b6-a0f8-6179b9eef738
 */
typedef struct {
  EmfRecordType iType;
  DWORD nSize;
  RECTL rclBounds;
  DWORD nRgnDataSize;
  BYTE rgnData[nRgnDataSize];
} EMRINVERTRGN;

//------------------------------------------------
// 13. Reserved Record Types
//------------------------------------------------

typedef struct tagEMRRESERVED107 {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ReservedData[8];
} EMRRESERVED107;

typedef struct tagEMRRESERVED117 {
  EmfRecordType iType;
  DWORD	nSize;
  DWORD ReservedData[8];
} EMRRESERVED117;


typedef struct {
  local int _iType = ReadUInt(FTell());
  
  switch(_iType) {
    case EMR_POLYBEZIER         : // 0x2
      EMRPOLYBEZIER PolyBezier;
      break;

    case EMR_POLYGON            : // 0x3
      EMRPOLYGON Polygon;
      break;

    case EMR_POLYLINE           : // 0x4 
      EMRPOLYLINE Polyline;
      break;

    case EMR_POLYBEZIERTO       : // 0x5
      EMRPOLYBEZIERTO PolyBezierTo;
      break;

    case EMR_POLYLINETO         : // 0x6
      EMRPOLYLINETO PolylineTo;
      break;

    case EMR_POLYPOLYLINE       : // 0x7
      EMRPOLYPOLYLINE PolyPolyline;
      break;

    case EMR_POLYPOLYGON        : // 0x8
      EMRPOLYPOLYGON PolyPolygon;
      break;

    case EMR_SETPIXELV          : // 0xf
      EMRSETPIXELV SetPixelV;
      break;

    case EMR_OFFSETCLIPRGN      : // 0x1a
      EMROFFSETCLIPRGN OffsetClipRgn;
      break;

    case EMR_EXCLUDECLIPRECT    : // 0x1d
      EMREXCLUDECLIPRECT ExcludeClipRect;
      break;

    case EMR_SELECTOBJECT       : // 0x25
      EMRSELECTOBJECT SelectObject;
      break;

    case EMR_CREATEPEN          : // 0x26
      EMRCREATEPEN CreatePen;
      break;

    case EMR_CREATEBRUSHINDIRECT: // 0x27
      EMRCREATEBRUSHINDIRECT CreateBrushIndirect;
      break;

    case EMR_DELETEOBJECT       : // 0x28
      EMRDELETEOBJECT DeleteObject;
      break;

    case EMR_ANGLEARC           : // 0x29
      EMRANGLEARC AngleArc;
      break;

    case EMR_RECTANGLE          : // 0x2b
      EMRRECTANGLE Rectangle;
      break;

    case EMR_ROUNDRECT          : // 0x2c
      EMRROUNDRECT RoundRect;
      break;

    case EMR_ARC                : // 0x2d
      EMRARC Arc;
      break;

    case EMR_CHORD              : // 0x2e
      EMRCHORD Chord;
      break;

    case EMR_PIE                : // 0x2f
      EMRPIE Pie;
      break;

    case EMR_SELECTPALETTE      : // 0x30
      EMRSELECTPALETTE SelectPalette;
      break;

    case EMR_CREATEPALETTE      : // 0x31
      EMRCREATEPALETTE CreatePalette;
      break;

    case EMR_SETPALETTEENTRIES  : // 0x32
      EMRSETPALETTEENTRIES SetPaletteEntries;
      break;

    case EMR_RESIZEPALETTE      : // 0x33
      EMRRESIZEPALETTE ResizePalette;
      break;

    case EMR_EXTFLOODFILL       : // 0x35
      EMREXTFLOODFILL ExtFloodFill;
      break;

    case EMR_LINETO             : // 0x36
      EMRLINETO LineTo;
      break;

    case EMR_ARCTO              : // 0x37
      EMRARCTO ArcTo;
      break;

    case EMR_POLYDRAW           : // 0x38
      EMRPOLYDRAW PolyDraw;
      break;

    case EMR_BEGINPATH          : // 0x3b
      EMRBEGINPATH BeginPath;
      break;

    case EMR_ENDPATH            : // 0x3c
      EMRENDPATH EndPath;
      break;

    case EMR_CLOSEFIGURE        : // 0x3d
      EMRCLOSEFIGURE CloseFigure;
      break;

    case EMR_FILLPATH           : // 0x3e
      EMRFILLPATH FillPath;
      break;

    case EMR_STROKEANDFILLPATH  : // 0x3f
      EMRSTROKEANDFILLPATH FillPath;
      break;

    case EMR_STROKEPATH         : // 0x40
      EMRSTROKEPATH StrokePath;
      break;

    case EMR_FLATTENPATH        : // 0x41
      EMRFLATTENPATH FlattenPath;
      break;

    case EMR_WIDENPATH          : // 0x42
      EMRWIDENPATH WidenPath;
      break;

    case EMR_SELECTCLIPPATH     : // 0x43
      EMRSELECTCLIPPATH SelectClipPath;
      break;

    case EMR_ABORTPATH          : // 0x44
      EMRABORTPATH AbortPath;
      break;

    case EMR_FILLRGN            : // 0x47
      EMRFILLRGN FillRgn;
      break;

    case EMR_FRAMERGN           : // 0x48
      EMRFRAMERGN FrameRgn;
      break;

    case EMR_INVERTRGN          : // 0x49
      EMRINVERTRGN InvertRgn;
      break;

    case EMR_PAINTRGN           : // 0x4a
      EMRPAINTRGN PaintRgn;
      break;

    case EMR_EXTSELECTCLIPRGN   : // 0x4b
      EMREXTSELECTCLIPRGN ExtSelectClipRgn;
      break;

    case EMR_BITBLT             : // 0x4c
      EMRBITBLT BitBlt;
      break;

    case EMR_STRETCHBLT         : // 0x4d
      EMRSTRETCHBLT StretchBlt;
      break;

    case EMR_MASKBLT            : // 0x4e
      EMRMASKBLT MaskBlt;
      break;

    case EMR_PLGBLT             : // 0x4f
      EMRPLGBLT PlgBlt;
      break;

    case EMR_SETDIBITSTODEVICE  : // 0x50
      EMRSETDIBITSTODEVICE SetDiBitsToDevice;
      break;

    case EMR_STRETCHDIBITS      : // 0x51
      EMRSTRETCHDIBITS StretchDIBits;
      break;

    case EMR_EXTTEXTOUTA        : // 0x53
      EMREXTTEXTOUTA ExtTextOutA;
      break;

    case EMR_CREATEMONOBRUSH    : // 0x5d
      EMRCREATEMONOBRUSH CreateMonoBrush;
      break;

    case EMR_CREATEDIBPATTERNBRUSHPT: // 0x5e
      EMRCREATEDIBPATTERNBRUSHPT CreateDIBPatternBrushPt;
      break;

    case EMR_EXTCREATEPEN           : // 0x5f
      EMREXTCREATEPEN CreatePenEx;
      break;

    case EMR_POLYTEXTOUTA           : // 0x60
      EMRPOLYTEXTOUTA PolyTextOutA;
      break;

    case EMR_CREATECOLORSPACE       : // 0x63
      EMRCREATECOLORSPACE CreateColorSpace;
      break;

    case EMR_SETCOLORSPACE          : // 0x64
      EMRSETCOLORSPACE SetColorSpace;
      break;

    case EMR_DELETECOLORSPACE       : // 0x65
      EMRDELETECOLORSPACE DeleteColorSpace;
      break;

    case EMR_GLSRECORD              : // 0x66
      EMRGLSRECORD GlsRecord;
      break;

    case EMR_GLSBOUNDEDRECORD       : // 0x67
      EMRGLSBOUNDEDRECORD GlsBoundedRecord;
      break;

    case EMR_DRAWESCAPE             : // 0x69
      EMRDRAWESCAPE DrawEscape;
      break;

    case EMR_EXTESCAPE              : // 0x6a
      EMREXTESCAPE ExtEscape;
      break;

    case EMR_RESERVED_107           : // 0x6b
      EMRRESERVED107 Reserved;
      break;

    case EMR_FORCEUFIMAPPING        : // 0x6d
      EMRFORCEUFIMAPPING ForceUfiMapping;
      break;

    case EMR_NAMEDESCAPE            : // 0x6e
      EMRNAMEDESCAPE NamedEscape;
      break;

    case EMR_COLORCORRECTPALETTE    : // 0x6f
      EMRCOLORCORRECTPALETTE ColorCorrectPalette;
      break;

    case EMR_TRANSPARENTBLT         : // 0x74
      EMRTRANSPARENTBLT TransparentBlt;
      break;

    case EMR_RESERVED_117           : // 0x75
      EMRRESERVED117 Reserved;
      break;

    case EMR_GRADIENTFILL           : // 0x76
      EMRGRADIENTFILL GradientFil;
      break;

    case EMR_CREATECOLORSPACEW      : // 0x7a
      EMRCREATECOLORSPACEW CreateColorSpaceW;
      break;

    case EMR_ALPHABLEND             : // 0x72
      EMRALPHABLEND AlphaBlend;
      break;

    case EMR_COLORMATCHTOTARGETW    : // 0x79
      EMRCOLORMATCHTOTARGETW ColorMatchToTargetW;
      break;

    default:
      EmfRecordType iType;
      DWORD nSize;
      if (nSize > 8) {
        DWORD	dParm[((nSize-8)/4)];
      };
  }

} Record;

LittleEndian();

// Add EMF_HEADER record.
EMRHEADER EmfHeader;

// Add optional description record.
if (EmfHeader.nDescription && EmfHeader.offDescription){
  FSeek(EmfHeader.offDescription);
  EMRDESCRIPTION EmfDescription;
}

// Start of additonal records (after EMR_HEADER).
FSeek(EmfHeader.nSize);

// Parse the number of records indicated in the header.
local int recCnt = 0;
for( recCnt = 0; recCnt < EmfHeader.nRecords - 2; recCnt++ ) {
  Record record;
}

// Close EMF records.
EMREOF EmfEndOfFile;
